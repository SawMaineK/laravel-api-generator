<?php namespace $NAMESPACE_API_CONTROLLER$;

use $NAMESPACE_REQUEST$;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use Illuminate\Http\Request;
use $BASE_CONTROLLER$ as AppBaseController;
use Response;

class $MODEL_NAME$APIController extends AppBaseController
{
	/** @var  $MODEL_NAME$Repository */
	private $$MODEL_NAME_CAMEL$Repository;

	function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
	{
		$this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
	}

	/**
	 * Display a listing of the $MODEL_NAME$.
	 * GET|HEAD /$MODEL_NAME_PLURAL_CAMEL$
	 *
	 * @return Response
	 */
	public function index(Request $request)
	{

		$offset  = $request->input('offset') ? $request->input('offset') : 1;
		$limit   = $request->input('limit') ? $request->input('limit') : 12;

		$offset  = ($offset - 1) * $limit;
		
		$$MODEL_NAME_PLURAL_CAMEL$ = $MODEL_NAME$::$POINTER_MODELS_RELATIONSHIP$orderBy('id','desc')->offset($offset)->limit($limit)->get();
				
		return response()->json($$MODEL_NAME_PLURAL_CAMEL$);
	}

	/**
	 * Show the form for creating a new $MODEL_NAME$.
	 * GET|HEAD /$MODEL_NAME_PLURAL_CAMEL$/create
	 *
	 * @return Response
	 */
	public function create()
	{
	}

	/**
	 * Store a newly created $MODEL_NAME$ in storage.
	 * POST /$MODEL_NAME_PLURAL_CAMEL$
	 *
	 * @param Request $request
	 *
	 * @return Response
	 */
	public function store(Request $request)
	{
		if(sizeof($MODEL_NAME$::$rules) > 0){
			$validator =  $this->validateRequestOrFail($request, $MODEL_NAME$::$rules);
			if($validator){
				return $validator;
			}
		}

		$input = $request->all();

		$$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);

		return $this->sendResponse($$MODEL_NAME_PLURAL_CAMEL$->toArray(), "$MODEL_NAME$ saved successfully");
	}

	/**
	 * Display the specified $MODEL_NAME$.
	 * GET|HEAD /$MODEL_NAME_PLURAL_CAMEL$/{id}
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function show($id)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->apiFindOrFail($id);

		return $this->sendResponse($$MODEL_NAME_CAMEL$->toArray(), "$MODEL_NAME$ retrieved successfully");
	}

	/**
	 * Show the form for editing the specified $MODEL_NAME$.
	 * GET|HEAD /$MODEL_NAME_PLURAL_CAMEL$/{id}/edit
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function edit($id)
	{
		//
	}

	/**
	 * Update the specified $MODEL_NAME$ in storage.
	 * PUT/PATCH /$MODEL_NAME_PLURAL_CAMEL$/{id}
	 *
	 * @param  int              $id
	 * @param Request $request
	 *
	 * @return Response
	 */
	public function update($id, Request $request)
	{
		if(sizeof($MODEL_NAME$::$rules) > 0){
			$validator =  $this->validateRequestOrFail($request, $MODEL_NAME$::$rules);
			if($validator){
				return $validator;
			}
		}

		$input = $request->all();

		/** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->apiFindOrFail($id);

		$result = $this->$MODEL_NAME_CAMEL$Repository->updateRich($input, $id);

		$$MODEL_NAME_CAMEL$ = $$MODEL_NAME_CAMEL$->fresh();

		return $this->sendResponse($$MODEL_NAME_CAMEL$->toArray(), "$MODEL_NAME$ updated successfully");
	}

	/**
	 * Remove the specified $MODEL_NAME$ from storage.
	 * DELETE /$MODEL_NAME_PLURAL_CAMEL$/{id}
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function destroy($id)
	{
		$this->$MODEL_NAME_CAMEL$Repository->apiDeleteOrFail($id);

		return $this->sendResponse($id, "$MODEL_NAME$ deleted successfully");
	}
}
