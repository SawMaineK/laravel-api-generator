<?php namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_APP$\Http\Controllers\Controller as AppBaseController;
use Illuminate\Http\Request;
use Response;
use Symfony\Component\HttpKernel\Exception\HttpException;

class AppBaseController extends AppBaseController
{
    /**
     * Validate request for current resource
     *
     * @param Request $request
     * @param array $rules
     * @param array $messages
     * @param array $customAttributes
     */
    public function validateRequestOrFail($request, array $rules, $messages = [], $customAttributes = [])
    {
        $validator = $this->getValidationFactory()->make($request->all(), $rules, $messages, $customAttributes);
	    
        if ($validator->fails())
        {
	        throw new HttpException(400, $validator->errors()->getMessages());
        }
    }

	public function makeResponse($result, $message)
	{
		return [
			'data' => $result,
			'message' => $message
		];
	}

	public function sendResponse($result, $message)
	{
		return Response::json($this->makeResponse($result, $message));
	}

    public function uploadImage($file, $path, $resize = [400, 200, 100]){
        $filename = "photo_".date('YmdHis')."_".rand().$file->getClientOriginalName();;
        $file_path = public_path().$path;
        $file->move($file_path, $filename);
        $size = getimagesize($file_path.$filename);
        switch(strtolower($size['mime']))
        {
            case 'image/png':
                $source_image = imagecreatefrompng($file_path.$filename);
                break;
            case 'image/jpeg':
                $source_image = imagecreatefromjpeg($file_path.$filename);
                break;
            case 'image/gif':
                $source_image = imagecreatefromgif($file_path.$filename);
                break;
            default: die('image type not supported');
        }
        $resize_url = [];
        foreach ($resize as $key => $value) {
            $width      = $value; 
            $height     = round($width*$size[1]/$size[0]);
            $photoX     = ImagesX($source_image);
            $photoY     = ImagesY($source_image);
            $images_fin = ImageCreateTrueColor($width, $height);
            ImageCopyResampled($images_fin, $source_image, 0, 0, 0, 0, $width+1, $height+1, $photoX, $photoY);
            if(!file_exists($file_path.'x'.$value)){
                mkdir($file_path.'x'.$value);
            }
            $resize_url[] = $path.'x'.$value.'/'.$filename;
            ImageJPEG($images_fin, $file_path.'x'.$value.'/'.$filename, 100);
        }
        ImageDestroy($source_image);
        ImageDestroy($images_fin);
        return ['__type'=>'File', 'name' => $filename, 'url'=>$path.$filename,'resize_url' => $resize_url];
    }
}